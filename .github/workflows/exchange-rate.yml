name: Daily Exchange Rate

on:
  schedule:
    - cron: "0 2 * * 1-5"
  workflow_dispatch:

jobs:
  get_exchange_rate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install Dependencies
        run: npm install axios

      - name: Get Exchange Rate and Send to Channel.io
        run: |
          const axios = require('axios');

          async function main() {
            try {
              // 환율 정보 가져오기
              const EXCHANGE_RATE_API_KEY = "${{ secrets.EXCHANGE_RATE_API_KEY }}";
              const exchange_url = `https://v6.exchangerate-api.com/v6/${EXCHANGE_RATE_API_KEY}/latest/USD`;

              const { data } = await axios.get(exchange_url);
              const rate = data.conversion_rates.KRW;
              const lastUpdated = new Date(data.time_last_update_unix * 1000).toLocaleString('ko-KR');
              const rateMessage = `오늘의 원/달러 환율은 ${rate}입니다.`;

              // Channel.io로 메시지 전송
              const channelUrl = "https://api.channel.io/open/v5/groups/@${{ secrets.GROUP_NAME }}/messages";

              const headers = {
                'Content-Type': 'application/json',
                'x-access-key': '${{ secrets.CHANNEL_ACCESS_KEY }}',
                'x-access-secret': '${{ secrets.CHANNEL_ACCESS_SECRET }}'
              };

              const payload = {
                blocks: [
                  {
                    type: "text",
                    value: "<b>원/달러 환율 정보</b>"
                  },
                  {
                    type: "text",
                    value: rateMessage
                  },
                  {
                    type: "text",
                    value: `(마지막 업데이트: ${lastUpdated})`
                  }
                ]
              };

              const response = await axios.post(
                `${channelUrl}?botName=${{ secrets.BOT_NAME }}`,
                payload,
                { headers }
              );

              if (response.status !== 200) {
                throw new Error(`Channel.io API 요청 실패: ${response.status}`);
              }
            } catch (error) {
              console.error('Error:', error.message);
              process.exit(1);
            }
          }

          main();
        shell: node
